{"version":3,"sources":["ng://wizard-storage/src/app/wizard-storage/wizard-storage.service.ts","ng://wizard-storage/src/app/wizard-storage/wizard-storage.module.ts"],"names":["WizardStorageService","_this","this","local","session","Object","isSupported","sessionStorage","onchange","key","onChange","setItem","value","version","expires","getItem","hasItem","removeItem","getAllKeys","clear","localStorage","prototype","storage","itemBackup","e","store","result","item","content","JSON","parse","data","undefined","Date","getTime","subjects","next","oldValue","newValue","d","setTime","stringify","i","length","push","BehaviorSubject","Injectable","WizardStorageModule","NgModule","args","declarations","exports","imports","CommonModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["\r\n/*\r\n* WizardStorage provides an easy way to use web storage capabilities of modern web browsers.\r\n*\r\n* reference to browser compatibilities.\r\n* https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage#Browser_compatibility\r\n* https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage#Browser_compatibility\r\n*/\r\nimport {Injectable} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class WizardStorageService {\r\n\r\n    public local: any;\r\n    public session: any;\r\n    private subjects = {\r\n        local: {},\r\n        session: {}\r\n    };\r\n\r\n    private isSupported(storage: any) {\r\n        try {\r\n            const itemBackup = storage.getItem('');\r\n            storage.removeItem('');\r\n            storage.setItem('', itemBackup);\r\n            if (itemBackup === null) {\r\n                storage.removeItem('');\r\n            } else {\r\n                storage.setItem('', itemBackup);\r\n            }\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    private getItem(store: string, key: string, version?: string) {\r\n        const storage: any = store === 'session' ? sessionStorage : localStorage\r\n        const item = storage.getItem(key);\r\n        let content: any = {};\r\n        let result: any;\r\n\r\n        if (item) {\r\n            try {\r\n                content = JSON.parse(item);\r\n            } catch (e) {\r\n                content = {\r\n                    data: item\r\n                };\r\n            }\r\n        }\r\n\r\n        if (version && content.version) {\r\n            if (version == content.version) {\r\n                result = content.data;\r\n            } else {\r\n                result = undefined;\r\n            }\r\n        } else {\r\n            result = content.data;\r\n        }\r\n        if (result && content.expires) {\r\n            if (new Date().getTime() >= content.expires) {\r\n                if (this.subjects[store][key]) {\r\n                    this.subjects[store][key].next({\r\n                        key: key,\r\n                        oldValue: result,\r\n                        newValue: null\r\n                    });\r\n                }\r\n                storage.removeItem(key);\r\n                result = undefined;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    private setItem(store: string, key: string, value: any, version?: string, expires?: number) {\r\n        const storage: any = store === 'session' ? sessionStorage : localStorage\r\n        const content: any = {data: value};\r\n\r\n        if (version) {\r\n            content.version = version;\r\n        }\r\n        if (expires != undefined) {\r\n            const d = new Date();\r\n            d.setTime(d.getTime() + (expires*3600000)); \r\n            content.expires = d.getTime();\r\n        }\r\n        if (this.subjects[store][key]) {\r\n            this.subjects[store][key].next({\r\n                key: key,\r\n                oldValue: storage.getItem(key),\r\n                newValue: value\r\n            });\r\n        }\r\n        storage.setItem(key, JSON.stringify(content));\r\n    }\r\n    private getAllKeys(storage: any) {\r\n        const result = [];\r\n        for(let i = 0; i < storage.length; i++) {\r\n            result.push(storage.key( i ));\r\n        }\r\n        return result;\r\n    }\r\n    private onChange(key: string, storage: string) {\r\n        if (!this.subjects[storage][key]) {\r\n            this.subjects[storage][key] = new BehaviorSubject<any>(null);\r\n        }\r\n        return this.subjects[storage][key];\r\n    }\r\n\r\n    constructor() {\r\n        this.session = new Object();\r\n        this.session.isSupported = () => {return this.isSupported(sessionStorage)};\r\n        this.session.onchange = (key: string) => {return this.onChange(key, 'session')}\r\n        this.session.setItem = (key: string, value: any, version?: string, expires?: number) => {\r\n            this.setItem('session', key, value, version, expires);\r\n        };\r\n        this.session.getItem = (key: string, version?: string) => {return this.getItem('session', key, version)};\r\n        this.session.hasItem = (key: string) => {return sessionStorage.getItem(key) !== null};\r\n        this.session.removeItem = (key: string) => {sessionStorage.removeItem(key)};\r\n        this.session.getAllKeys = () => {return this.getAllKeys(sessionStorage)};\r\n        this.session.clear = () => { sessionStorage.clear()};\r\n\r\n        \r\n        this.local = new Object();\r\n        this.local.isSupported = () => {return this.isSupported(localStorage)};\r\n        this.local.onchange = (key: string) => {return this.onChange(key, 'local')}\r\n        this.local.setItem = (key: string, value: any, version?: string, expires?: number) => {\r\n            this.setItem('local', key, value,version, expires);\r\n        };\r\n        this.local.getItem = (key: string, version?: string) => {return this.getItem('local', key, version)};\r\n        this.local.hasItem = (key: string) => {return localStorage.getItem(key) !== null};\r\n        this.local.removeItem = (key: string) => {localStorage.removeItem(key)};\r\n        this.local.getAllKeys = () => {return this.getAllKeys(localStorage)};\r\n        this.local.clear = () => {localStorage.clear()};\r\n    }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WizardStorageService } from './wizard-storage.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  exports: [\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    WizardStorageService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class WizardStorageModule { }\r\n"]}