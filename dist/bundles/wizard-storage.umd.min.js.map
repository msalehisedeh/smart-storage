{"version":3,"sources":["ng://wizard-storage/src/app/wizard-storage/wizard-storage.service.ts","ng://wizard-storage/src/app/wizard-storage/wizard-storage.directive.ts","ng://wizard-storage/src/app/wizard-storage/wizard-storage.module.ts"],"names":["WizardStorageService","_this","this","local","session","cookies","Object","isSupported","sessionStorage","onchange","key","onChange","setItem","value","version","expires","getItem","hasItem","removeItem","getAllKeys","clear","localStorage","domain","path","isSecure","test","willExpires","subjects","next","oldValue","newValue","url","document","location","href","JSON","stringify","cookie","encodeURIComponent","result","decodeURIComponent","replace","RegExp","toJson","aKeys","split","nIdx","length","prototype","storage","itemBackup","e","store","item","content","parse","data","undefined","Date","getTime","d","setTime","i","push","BehaviorSubject","x","Injectable","WizardStorageDirective","wizardService","EventEmitter","onHover","event","wizardStorage","emit","Directive","args","selector","HostListener","Output","WizardStorageModule","NgModule","declarations","exports","imports","CommonModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["\r\n/*\r\n* WizardStorage provides an easy way to use web storage capabilities of modern web browsers.\r\n*\r\n* reference to browser compatibilities.\r\n* https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage#Browser_compatibility\r\n* https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage#Browser_compatibility\r\n*/\r\nimport {Injectable} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class WizardStorageService {\r\n\r\n    public local: any;\r\n    public session: any;\r\n    public cookies: any;\r\n\r\n    private subjects = {\r\n        local: {},\r\n        session: {},\r\n        cookies: {}\r\n    };\r\n\r\n    private isSupported(storage: any) {\r\n        try {\r\n            const itemBackup = storage.getItem('');\r\n            storage.removeItem('');\r\n            storage.setItem('', itemBackup);\r\n            if (itemBackup === null) {\r\n                storage.removeItem('');\r\n            } else {\r\n                storage.setItem('', itemBackup);\r\n            }\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    private getItem(store: string, key: string, version?: string) {\r\n        const storage: any = store === 'session' ? sessionStorage : localStorage\r\n        const item = storage.getItem(key);\r\n        let content: any = {};\r\n        let result: any;\r\n\r\n        if (item) {\r\n            try {\r\n                content = JSON.parse(item);\r\n            } catch (e) {\r\n                content = {\r\n                    data: item\r\n                };\r\n            }\r\n        }\r\n\r\n        if (version && content.version) {\r\n            if (version == content.version) {\r\n                result = content.data;\r\n            } else {\r\n                result = undefined;\r\n            }\r\n        } else {\r\n            result = content.data;\r\n        }\r\n        if (result && content.expires) {\r\n            if (new Date().getTime() >= content.expires) {\r\n                if (this.subjects[store][key]) {\r\n                    this.subjects[store][key].next({\r\n                        key: key,\r\n                        oldValue: content,\r\n                        newValue: null,\r\n                        url: document.location.href\r\n                    });\r\n                }\r\n                storage.removeItem(key);\r\n                result = undefined;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    private setItem(store: string, key: string, value: any, version?: string, expires?: number) {\r\n        const storage: any = store === 'session' ? sessionStorage : localStorage\r\n        const content: any = {data: value};\r\n\r\n        if (version) {\r\n            content.version = version;\r\n        }\r\n        if (expires != undefined) {\r\n            const d = new Date();\r\n            d.setTime(d.getTime() + (expires*3600000)); \r\n            content.expires = d.getTime();\r\n        }\r\n        if (this.subjects[store][key]) {\r\n            this.subjects[store][key].next({\r\n                key: key,\r\n                oldValue: storage.getItem(key),\r\n                newValue: content,\r\n                url: document.location.href\r\n            });\r\n        }\r\n        storage.setItem(key, JSON.stringify(content));\r\n    }\r\n    private getAllKeys(storage: any) {\r\n        const result = [];\r\n        for(let i = 0; i < storage.length; i++) {\r\n            result.push(storage.key( i ));\r\n        }\r\n        return result;\r\n    }\r\n    private onChange(key: string, storage: string) {\r\n        if (!this.subjects[storage][key]) {\r\n            this.subjects[storage][key] = new BehaviorSubject<any>(null);\r\n        }\r\n        return this.subjects[storage][key];\r\n    }\r\n\r\n    constructor() {\r\n\r\n        this.session = new Object();\r\n        this.session.isSupported = () => {return this.isSupported(sessionStorage)};\r\n        this.session.onchange = (key: string) => {return this.onChange(key, 'session')}\r\n        this.session.setItem = (key: string, value: any, version?: string, expires?: number) => {\r\n            this.setItem('session', key, value, version, expires);\r\n        };\r\n        this.session.getItem = (key: string, version?: string) => {return this.getItem('session', key, version)};\r\n        this.session.hasItem = (key: string) => {return sessionStorage.getItem(key) !== null};\r\n        this.session.removeItem = (key: string) => {sessionStorage.removeItem(key)};\r\n        this.session.getAllKeys = () => {return this.getAllKeys(sessionStorage)};\r\n        this.session.clear = () => { sessionStorage.clear()};\r\n\r\n        \r\n        this.local = new Object();\r\n        this.local.isSupported = () => {return this.isSupported(localStorage)};\r\n        this.local.onchange = (key: string) => {return this.onChange(key, 'local')}\r\n        this.local.setItem = (key: string, value: any, version?: string, expires?: number) => {\r\n            this.setItem('local', key, value,version, expires);\r\n        };\r\n        this.local.getItem = (key: string, version?: string) => {return this.getItem('local', key, version)};\r\n        this.local.hasItem = (key: string) => {return localStorage.getItem(key) !== null};\r\n        this.local.removeItem = (key: string) => {localStorage.removeItem(key)};\r\n        this.local.getAllKeys = () => {return this.getAllKeys(localStorage)};\r\n        this.local.clear = () => {localStorage.clear()};\r\n\r\n        this.cookies =  new Object();\r\n        this.cookies.isSupported = () => {return true;};\r\n        this.cookies.onchange = (key: string) => {return this.onChange(key, 'cookies')}\r\n        this.cookies.setItem = (key: string, value: any, expires?: number, domain?: string, path?: string, isSecure?: boolean) => {\r\n            if (!key || /^(?:expires|max\\-age|path|domain|secure)$/i.test(key)) {\r\n                return false;\r\n            }\r\n            let willExpires = \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\";\r\n            if (expires) {\r\n                willExpires = \"; max-age=\" + (expires*3600000);\r\n            }\r\n            if (this.subjects.cookies[key]) {\r\n                this.subjects.cookies[key].next({\r\n                    key: key,\r\n                    oldValue: this.cookies.getItem(key),\r\n                    newValue: value,\r\n                    url: document.location.href\r\n                });\r\n            }\r\n            if (typeof value === 'object'){\r\n                value = JSON.stringify(value);\r\n            }\r\n            document.cookie = encodeURIComponent(key) + \"=\" +\r\n                              encodeURIComponent(value) +\r\n                              willExpires + (domain ? \"; domain=\" + domain : \"\") +\r\n                              (path ? \"; path=\" + path : \"\") +\r\n                              (isSecure ? \"; secure\" : \"\");\r\n            return true;\r\n        };\r\n        this.cookies.getItem = (key: string) => {\r\n            const result = decodeURIComponent(\r\n                document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" +\r\n                encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\r\n                \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\r\n            return this.toJson(result);\r\n        };\r\n        this.cookies.hasItem = (key: string) => {\r\n            return (\r\n                new RegExp(\"(?:^|;\\\\s*)\" + encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")\r\n            ).test(document.cookie);\r\n        };\r\n        this.cookies.removeItem = (key: string, path?: string, domain?: string) => {\r\n            if (!key || !this.cookies.hasItem(key)) {\r\n                return false;\r\n            }\r\n            if (this.subjects.cookies[key]) {\r\n                this.subjects.cookies[key].next({\r\n                    key: key,\r\n                    oldValue: this.cookies.getItem(key),\r\n                    newValue: null,\r\n                    url: document.location.href\r\n                });\r\n            }\r\n            document.cookie = encodeURIComponent(key) +\r\n                            \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" +\r\n                            ( domain ? \"; domain=\" + domain : \"\") +\r\n                            ( path ? \"; path=\" + path : \"\");\r\n            return true;\r\n        };\r\n        this.cookies.getAllKeys = () => {\r\n            var aKeys = document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\").split(/\\s*(?:\\=[^;]*)?;\\s*/);\r\n            for (var nIdx = 0; nIdx < aKeys.length; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }\r\n            return aKeys;\r\n        };\r\n    }\r\n\r\n    toJson(value: any) {\r\n        let x = value;\r\n        try {\r\n            x = JSON.parse(value);\r\n        }catch(e){}\r\n        return x;\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    Input,\r\n    Output,\r\n    HostListener,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { WizardStorageService } from './wizard-storage.service';\r\n\r\n@Directive({\r\n    selector: '[wizardStorage]'\r\n})\r\nexport class WizardStorageDirective {\r\n\r\n    // Will listen to localStorage changes made\r\n    // by other applications.\r\n    @HostListener('window:storage', ['$event'])\r\n    onHover(event: any) {\r\n        this.wizardStorage.emit({\r\n            key: event.key,\r\n            oldValue: this.wizardService.toJson(event.oldValue),\r\n            newValue: this.wizardService.toJson(event.newValue),\r\n            url: event.url\r\n        });\r\n    }\r\n\r\n    @Output()\r\n    wizardStorage: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(\r\n        private wizardService: WizardStorageService\r\n    ) {\r\n    }\r\n\r\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WizardStorageService } from './wizard-storage.service';\r\nimport { WizardStorageDirective } from './wizard-storage.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WizardStorageDirective\r\n  ],\r\n  exports: [\r\n    WizardStorageDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    WizardStorageService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class WizardStorageModule { }\r\n"]}