/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class WizardStorageService {
    constructor() {
        this.subjects = {
            local: {},
            session: {},
            cookies: {}
        };
        this.session = new Object();
        this.session.isSupported = () => { return this.isSupported(sessionStorage); };
        this.session.onchange = (key) => { return this.onChange(key, 'session'); };
        this.session.setItem = (key, value, version, expires) => {
            this.setItem('session', key, value, version, expires);
        };
        this.session.getItem = (key, version) => { return this.getItem('session', key, version); };
        this.session.hasItem = (key) => { return sessionStorage.getItem(key) !== null; };
        this.session.removeItem = (key) => { sessionStorage.removeItem(key); };
        this.session.getAllKeys = () => { return this.getAllKeys(sessionStorage); };
        this.session.clear = () => { sessionStorage.clear(); };
        this.local = new Object();
        this.local.isSupported = () => { return this.isSupported(localStorage); };
        this.local.onchange = (key) => { return this.onChange(key, 'local'); };
        this.local.setItem = (key, value, version, expires) => {
            this.setItem('local', key, value, version, expires);
        };
        this.local.getItem = (key, version) => { return this.getItem('local', key, version); };
        this.local.hasItem = (key) => { return localStorage.getItem(key) !== null; };
        this.local.removeItem = (key) => { localStorage.removeItem(key); };
        this.local.getAllKeys = () => { return this.getAllKeys(localStorage); };
        this.local.clear = () => { localStorage.clear(); };
        this.cookies = new Object();
        this.cookies.isSupported = () => { return true; };
        this.cookies.onchange = (key) => { return this.onChange(key, 'cookies'); };
        this.cookies.setItem = (key, value, expires, domain, path, isSecure) => {
            if (!key || /^(?:expires|max\-age|path|domain|secure)$/i.test(key)) {
                return false;
            }
            /** @type {?} */
            let willExpires = "; expires=Fri, 31 Dec 9999 23:59:59 GMT";
            if (expires) {
                willExpires = "; max-age=" + (expires * 3600000);
            }
            if (this.subjects.cookies[key]) {
                this.subjects.cookies[key].next({
                    key: key,
                    oldValue: this.cookies.getItem(key),
                    newValue: value,
                    url: document.location.href
                });
            }
            if (typeof value === 'object') {
                value = JSON.stringify(value);
            }
            document.cookie = encodeURIComponent(key) + "=" +
                encodeURIComponent(value) +
                willExpires + (domain ? "; domain=" + domain : "") +
                (path ? "; path=" + path : "") +
                (isSecure ? "; secure" : "");
            return true;
        };
        this.cookies.getItem = (key) => {
            /** @type {?} */
            const result = decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" +
                encodeURIComponent(key).replace(/[\-\.\+\*]/g, "\\$&") +
                "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
            return this.toJson(result);
        };
        this.cookies.hasItem = (key) => {
            return (new RegExp("(?:^|;\\s*)" + encodeURIComponent(key).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
        };
        this.cookies.removeItem = (key, path, domain) => {
            if (!key || !this.cookies.hasItem(key)) {
                return false;
            }
            if (this.subjects.cookies[key]) {
                this.subjects.cookies[key].next({
                    key: key,
                    oldValue: this.cookies.getItem(key),
                    newValue: null,
                    url: document.location.href
                });
            }
            document.cookie = encodeURIComponent(key) +
                "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" +
                (domain ? "; domain=" + domain : "") +
                (path ? "; path=" + path : "");
            return true;
        };
        this.cookies.getAllKeys = () => {
            /** @type {?} */
            var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
            for (var nIdx = 0; nIdx < aKeys.length; nIdx++) {
                aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
            }
            return aKeys;
        };
    }
    /**
     * @param {?} storage
     * @return {?}
     */
    isSupported(storage) {
        try {
            /** @type {?} */
            const itemBackup = storage.getItem('');
            storage.removeItem('');
            storage.setItem('', itemBackup);
            if (itemBackup === null) {
                storage.removeItem('');
            }
            else {
                storage.setItem('', itemBackup);
            }
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @param {?} store
     * @param {?} key
     * @param {?=} version
     * @return {?}
     */
    getItem(store, key, version) {
        /** @type {?} */
        const storage = store === 'session' ? sessionStorage : localStorage;
        /** @type {?} */
        const item = storage.getItem(key);
        /** @type {?} */
        let content = {};
        /** @type {?} */
        let result;
        if (item) {
            try {
                content = JSON.parse(item);
            }
            catch (e) {
                content = {
                    data: item
                };
            }
        }
        if (version && content.version) {
            if (version == content.version) {
                result = content.data;
            }
            else {
                result = undefined;
            }
        }
        else {
            result = content.data;
        }
        if (result && content.expires) {
            if (new Date().getTime() >= content.expires) {
                if (this.subjects[store][key]) {
                    this.subjects[store][key].next({
                        key: key,
                        oldValue: content,
                        newValue: null,
                        url: document.location.href
                    });
                }
                storage.removeItem(key);
                result = undefined;
            }
        }
        return result;
    }
    /**
     * @param {?} store
     * @param {?} key
     * @param {?} value
     * @param {?=} version
     * @param {?=} expires
     * @return {?}
     */
    setItem(store, key, value, version, expires) {
        /** @type {?} */
        const storage = store === 'session' ? sessionStorage : localStorage;
        /** @type {?} */
        const content = { data: value };
        if (version) {
            content.version = version;
        }
        if (expires != undefined) {
            /** @type {?} */
            const d = new Date();
            d.setTime(d.getTime() + (expires * 3600000));
            content.expires = d.getTime();
        }
        if (this.subjects[store][key]) {
            this.subjects[store][key].next({
                key: key,
                oldValue: storage.getItem(key),
                newValue: content,
                url: document.location.href
            });
        }
        storage.setItem(key, JSON.stringify(content));
    }
    /**
     * @param {?} storage
     * @return {?}
     */
    getAllKeys(storage) {
        /** @type {?} */
        const result = [];
        for (let i = 0; i < storage.length; i++) {
            result.push(storage.key(i));
        }
        return result;
    }
    /**
     * @param {?} key
     * @param {?} storage
     * @return {?}
     */
    onChange(key, storage) {
        if (!this.subjects[storage][key]) {
            this.subjects[storage][key] = new BehaviorSubject(null);
        }
        return this.subjects[storage][key];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toJson(value) {
        /** @type {?} */
        let x = value;
        try {
            x = JSON.parse(value);
        }
        catch (e) { }
        return x;
    }
}
WizardStorageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WizardStorageService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    WizardStorageService.prototype.local;
    /** @type {?} */
    WizardStorageService.prototype.session;
    /** @type {?} */
    WizardStorageService.prototype.cookies;
    /** @type {?} */
    WizardStorageService.prototype.subjects;
}

//# sourceMappingURL=data:application/json;base64,